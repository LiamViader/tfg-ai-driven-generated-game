from typing import List, TypedDict, Dict, Any, Optional
from pydantic import BaseModel, Field, field_validator
from core_game.map.schemas import ScenarioModel, ScenarioImageGenerationTemplate



class LlmGeneratedPayload(BaseModel):
    """Specific payload for llm."""
    scene_summary: str = Field(description="A very brief summary of the main scene (1-3 words). Example: 'A floating castle'.")
    scene_detail: str = Field(description="A detailed visual description of the main scene (5-12 words). Example: 'A majestic castle with glowing towers drifts silently among a sea of clouds.'")
    ground_detail: str = Field(description="A detailed description of the ground or base of the scene (3-6 words). Example: 'cracked, ancient stone with glowing blue lava flowing through the fissures.'")
    ground_summary: str = Field(description="A very brief summary of the ground or base (1-3 words). Example: 'Cracked lava stone'.")
    

class ScenarioProcessorState(BaseModel):
    """
    Represents the state for a single processed scenario.
    This is the object that flows through the 'scenario_processor' subgraph.
    """
    scenario: ScenarioModel = Field(
        ...,
        description="The scenario to generate the image from."
    )
    graphic_style: str = Field(
        ...,
        description="The global graphic style passed down from the main graph."
    )
    generation_payload: Optional[ScenarioImageGenerationTemplate] = Field(
        default=None, 
        description="The detailed payload generated by the LLM for the image API."
    )
    image_base64: Optional[str] = Field(
        default=None, 
        description="The base64 encoded string of the generated image."
    )
    error: Optional[str] = Field(
        default=None, 
        description="An error message if anything fails during the processing of this scenario."
    )
    retry_count: int = Field(
        default=0, 
        description="A counter to track the number of retries for the payload generation."
    )
    general_game_context: str = Field(
        ...,
        description="A string containing a description of the general game context"
    )
    image_api_url: str = Field(description="The URL for the image generation API.")